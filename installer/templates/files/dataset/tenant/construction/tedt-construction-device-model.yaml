apiVersion: templates.sitewhere.io/v1alpha3
kind: TenantEngineDatasetTemplate
metadata:
  name: construction-device-model
  labels:
      sitewhere.io/functional-area: device-management
spec:
  configuration: |
    let UUID = Java.type('java.util.UUID')
  
    // ########### //
    // Common Code //
    // ########### //
    let devicesPerSite = 30
    
    function randomId() { 
      return UUID.randomUUID().toString();
    }
    
    function randomDeviceToken(type) {
      return '' + Math.floor(Math.random() * 100000) + '-' + type.getToken().toUpperCase() + '-' + Math.floor(Math.random() * 10000000);
    }
    
    function randomItem(items) {
      return items[Math.floor(Math.random() * items.length)];
    }
    
    // ################################### //
    // Create Customer Types and Customers //
    // ################################### //
    
    // Construction company type.
    let companyCustomerType = deviceBuilder.newCustomerType('construction', 'Construction Company');
    companyCustomerType.withDescription('A company that manages one or more construction areas.').withIcon('building');
    companyCustomerType = deviceBuilder.persist(companyCustomerType);
    logger.info(`[Create Customer Type] ${companyCustomerType.getName()}`);
    
    // Subcontractor company type.
    let subCustomerType = deviceBuilder.newCustomerType('subcontractor', 'Subcontractor');
    subCustomerType.withDescription('A subcontractor that works for a company.').withIcon('truck');
    subCustomerType = deviceBuilder.persist(subCustomerType);
    logger.info(`[Create Customer Type] ${subCustomerType.getName()}`);
    
    // Acme Construction Company.
    let acmeCustomer = deviceBuilder.newCustomer(companyCustomerType.getToken(), null, 'acme', 'ACME Construction Company');
    acmeCustomer.withDescription('ACME construction company manages many subcontractors and construction sites.');
    acmeCustomer.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/construction.jpg');
    acmeCustomer = deviceBuilder.persist(acmeCustomer);
    logger.info(`[Create Customer] ${acmeCustomer.getName()}`);
    
    // Subcontractor A.
    let subACustomer = deviceBuilder.newCustomer(subCustomerType.getToken(), acmeCustomer.getToken(), 'subA', 'Subcontractor A');
    subACustomer.withDescription('Subcontractor A manages multiple construction sites.');
    subACustomer.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/construction.jpg');
    subACustomer = deviceBuilder.persist(subACustomer);
    logger.info(`[Create Customer] ${subACustomer.getName()}`);
    
    // Subcontractor B.
    let subBCustomer = deviceBuilder.newCustomer(subCustomerType.getToken(), acmeCustomer.getToken(), 'subB', 'Subcontractor B');
    subBCustomer.withDescription('Subcontractor B manages multiple construction sites.');
    subBCustomer.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/construction.jpg');
    subBCustomer = deviceBuilder.persist(subBCustomer);
    logger.info(`[Create Customer] ${subBCustomer.getName()}`);
    
    // ################################# //
    // Create Area Types, Areas and Zone //
    // ################################# //
    
    // Construction area type.
    let constAreaType = deviceBuilder.newAreaType('construction', 'Construction Area');
    constAreaType.withDescription('A construction area.').withIcon('truck');
    constAreaType = deviceBuilder.persist(constAreaType);
    logger.info(`[Create Area Type] ${constAreaType.getName()}`);
    
    // Region type.
    let regionType = deviceBuilder.newAreaType('region', 'Region');
    regionType.withDescription('Subsection of the United States.').withIcon('map');
    regionType.withContainedAreaType(constAreaType.getToken());
    regionType = deviceBuilder.persist(regionType);
    logger.info(`[Create Area Type] ${regionType.getName()}`);
    
    // Southeast region.
    let seRegion = deviceBuilder.newArea(regionType.getToken(), null, 'southeast', 'Southeast Region');
    seRegion.withDescription('Region including the southeastern portion of the United States.');
    seRegion.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/areas/region-se.jpg');
    seRegion.coord(34.10260138703638, -84.24412965774536).coord(34.101837372446774, -84.24243450164795);
    seRegion.coord(34.101517550337825, -84.24091100692749).coord(34.10154953265732, -84.23856675624847);
    seRegion.coord(34.10153176473365, -84.23575580120087).coord(34.10409030732968, -84.23689305782318);
    seRegion.coord(34.104996439280704, -84.23700034618376).coord(34.10606246444614, -84.23700034618376);
    seRegion.coord(34.107691680235604, -84.23690915107727);
    seRegion = deviceBuilder.persist(seRegion);
    logger.info(`[Create Area] ${seRegion.getName()}`);
    
    // Peachtree construction site.
    let ptreeArea = deviceBuilder.newArea(constAreaType.getToken(), seRegion.getToken(), 'peachtree', 'Peachtree Construction Site');
    ptreeArea.withDescription("A construction site with many high-value assets that should not be taken offsite. The system provides location tracking for the assets and notifies administrators if any of the assets move outside of the general site area or into areas where they are not allowed.");
    ptreeArea.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/construction.jpg');
    ptreeArea.coord(34.10260138703638, -84.24412965774536).coord(34.101837372446774, -84.24243450164795);
    ptreeArea.coord(34.101517550337825, -84.24091100692749).coord(34.10154953265732, -84.23856675624847);
    ptreeArea.coord(34.10153176473365, -84.23575580120087).coord(34.10409030732968, -84.23689305782318);
    ptreeArea.coord(34.104996439280704, -84.23700034618376).coord(34.10606246444614, -84.23700034618376);
    ptreeArea.coord(34.107691680235604, -84.23690915107727);
    ptreeArea = deviceBuilder.persist(ptreeArea);
    logger.info(`[Create Area] ${ptreeArea.getName()}`);
    
    // Create zone associated with construction site.
    let zone = deviceBuilder.newZone('officepark', 'Office Park', ptreeArea);
    zone.withBorderColor('#017112').withBorderOpacity(0.8).withFillColor('#1db32e').withFillOpacity(0.5);
    zone.coord(34.10154272138541, -84.23811793316418).coord(34.10341869706135, -84.2390012741089);
    zone.coord(34.10372666664766, -84.23785686405608).coord(34.1038169851322, -84.23678040504456);
    zone.coord(34.10153087628316, -84.23575758923107);
    zone = deviceBuilder.persist(zone);
    
    // ################### //
    // Create Device Types //
    // ################### //
    
    let ns = 'http://sitewhere/common' // Namespace used for commands.
    let allDeviceTypes = []
    
    // Data structure for assignment information.
    function assnChoice(title, areaToken, assetToken) {
      return {'title': title, 'areaToken': areaToken, 'assetToken': assetToken};
    }
    
    // Lists for heavy equipment device types and available assignment options.
    let heavyEquipment = []
    let heavyEquipmentItems = []
    heavyEquipmentItems.push(assnChoice('Equipment Tracker', 'peachtree', '923483933-SERIAL-NUMBER-416F'));
    heavyEquipmentItems.push(assnChoice('Equipment Tracker', 'peachtree', '298383493-SERIAL-NUMBER-430F'));
    heavyEquipmentItems.push(assnChoice('Equipment Tracker', 'peachtree', '593434849-SERIAL-NUMBER-D5K2'));
    heavyEquipmentItems.push(assnChoice('Equipment Tracker', 'peachtree', '345438345-SERIAL-NUMBER-D5K2'));
    heavyEquipmentItems.push(assnChoice('Equipment Tracker', 'peachtree', '847234833-SERIAL-NUMBER-320EL'));
    heavyEquipmentItems.push(assnChoice('Equipment Tracker', 'peachtree', '349544949-SERIAL-NUMBER-324E'));
    
    // Lists for personnel device types and available assignment options.
    let personnel = []
    let personnelItems = []
    personnelItems.push(assnChoice('Personnel Tracker', 'peachtree', 'derek.adams@sitewhere.com'));
    personnelItems.push(assnChoice('Personnel Tracker', 'peachtree', 'bryan.rank@sitewhere.com'));
    personnelItems.push(assnChoice('Personnel Tracker', 'peachtree', 'martin.weber@sitewhere.com'));
    
    // Lists for sensor types and available assignment options.
    let sensors = []
    let sensorsItems = []
    sensorsItems.push(assnChoice('Sensor', 'peachtree', '342349343-SERIAL-NUMBER-EKA4'));
    sensorsItems.push(assnChoice('Sensor', 'peachtree', '623947324-SERIAL-NUMBER-EKB4'));
    sensorsItems.push(assnChoice('Sensor', 'peachtree', '392455494-SERIAL-NUMBER-T301W'));
    sensorsItems.push(assnChoice('Sensor', 'peachtree', '734539339-SERIAL-NUMBER-TS1'));
    sensorsItems.push(assnChoice('Sensor', 'peachtree', '193835744-SERIAL-NUMBER-TS1'));
    sensorsItems.push(assnChoice('Sensor', 'peachtree', '398434398-SERIAL-NUMBER-HS1'));
    
    function addDeviceType(type) {
      type = deviceBuilder.persist(type);
      allDeviceTypes.push(type); 
      logger.info(`[Create Device Type] ${type.getName()}`);
      return type;
    }
    
    function addCommand(type, command) { 
      command = deviceBuilder.persist(command);
      logger.info(`[Create Command] ${type.getName()} ${command.getName()}`);
      return command;
    }
    
    // Android device type.
    let android = deviceBuilder.newDeviceType('galaxytab3', 'Galaxy Tab 3');
    android.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/misc/android-logo.png');
    android.withDescription('This thin, lightweight Android tablet features a 7-inch touch display along with the same familiar interface as other Samsung Galaxy devices, making it easy to use. Use it to quickly browse the web, watch movies, read e-books, or download apps from Google Play.');
    android.metadata('manufacturer', 'Samsung').metadata('cpu', '1.2ghz').metadata('memory', '1gb');
    android = addDeviceType(android);
    let android_bgcolor = deviceBuilder.newCommand(android.getToken(), randomId(), 'http://android/example', 'changeBackground').withDescription('Change background color of application.').withStringParameter('color', true);
    addCommand(android, android_bgcolor);
    personnel.push(android);
    
    // Arduino UNO.
    let uno = deviceBuilder.newDeviceType('uno', 'Arduino UNO');
    uno.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/arduino/uno.jpg');
    uno.withDescription('The Arduino Uno is a microcontroller board based on the ATmega328.');
    uno.metadata('manufacturer', 'Arduino');
    uno = addDeviceType(uno);
    sensors.push(uno);
    
    // Arduino high memory device type.
    let arduino = deviceBuilder.newDeviceType('mega2560', 'Arduino Mega 2560');
    arduino.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/arduino/mega2560.jpg');
    arduino.withDescription('The Arduino Mega 2560 is a microcontroller board based on the ATmega2560.');
    arduino.metadata('manufacturer', 'Arduino');
    arduino = addDeviceType(arduino);
    let arduinohm_serial = deviceBuilder.newCommand(arduino.getToken(), randomId(), 'http://arduino/example', 'serialPrintln').withDescription('Print a message to the serial output.').withStringParameter('message', true);
    addCommand(arduino, arduinohm_serial);
    sensors.push(arduino);
    
    // Raspberry Pi device type.
    let rpi = deviceBuilder.newDeviceType('raspberrypi', 'Raspberry Pi');
    rpi.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/misc/raspberry-pi.jpg');
    rpi.withDescription('The Raspberry Pi is a credit-card-sized single-board computer developed in the UK by the Raspberry Pi Foundation with the intention of promoting the teaching of basic computer science in schools.');
    rpi.metadata('manufacturer', 'Raspberry Pi Foundation').metadata('weight', '1.000').metadata('memory', '2kb');
    rpi = addDeviceType(rpi);
    let rpi_hello = deviceBuilder.newCommand(rpi.getToken(), randomId(), 'http://raspberrypi/example', 'helloWorld').withDescription('Request a hello world response from device.').withStringParameter('greeting', true).withBooleanParameter('loud', true);
    addCommand(rpi, rpi_hello);
    sensors.push(rpi);
    
    // Meitrack device type.
    let meitrack = deviceBuilder.newDeviceType('mt90', 'MeiTrack MT90');
    meitrack.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/meitrack/mt90.jpg');
    meitrack.withDescription('MT90 is a waterproof GPS personal tracker suitable for lone workers, kids, aged, pet, assets, vehicle and fleet management.');
    meitrack.metadata('manufacturer', 'MeiTrack').metadata('weight', '1.000').metadata('memory', '8kb');
    meitrack = addDeviceType(meitrack);
    heavyEquipment.push(meitrack);
    
    // Gateway default device type.
    let gateway = deviceBuilder.newDeviceType('gateway', 'Gateway Default');
    gateway.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/misc/gateway.gif');
    gateway.withDescription('Sample gateway for testing nested device configurations.');
    gateway.metadata('manufacturer', 'Advantech');
    // def schema = gateway.makeComposite() newSchema() addSlot 'Gateway Port 1', 'gw1'
    // def dbus = schema.addUnit 'Default Bus', 'default'
    // dbus.addUnit 'PCI Bus', 'pci' addSlot 'PCI Device 1', 'pci1' addSlot 'PCI Device 2', 'pci2'
    // dbus.addUnit 'Serial Ports', 'serial' addSlot 'COM Port 1', 'com1' addSlot 'COM Port 2', 'com2'
    // schema.addUnit 'High Voltage Bus 1', 'hv1' addSlot 'HV Slot 1', 'slot1' addSlot 'HV Slot 2', 'slot2'
    gateway = addDeviceType(gateway);
    sensors.push(gateway);
    
    // OpenHAB device type.
    let openhab = deviceBuilder.newDeviceType('openhab', 'openHAB');
    openhab.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/gateway/openhab.png');
    openhab.withDescription('This is a virual device type for testing openHAB functionality.');
    openhab.metadata('manufacturer', 'openHAB');
    openhab = addDeviceType(openhab);
    let openhab_onoff = deviceBuilder.newCommand(openhab.getToken(), randomId(), ns, 'sendOnOffCommand' ).withDescription('Send on/off command to an openHAB item.').withStringParameter('itemName', true).withStringParameter('command', true);
    addCommand(openhab, openhab_onoff);
    let openhab_openclose = deviceBuilder.newCommand(openhab.getToken(), randomId(), ns, 'sendOpenCloseCommand').withDescription('Send open/close command to an openHAB item.').withStringParameter('itemName', true).withStringParameter('command', true);
    addCommand(openhab, openhab_openclose);
    sensors.push(openhab);
    
    // Node-RED device type.
    let nodered = deviceBuilder.newDeviceType('nodered', 'Node-RED');
    nodered.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/gateway/node-red.png');
    nodered.withDescription('This is a virual device type for testing Node-RED functionality.');
    nodered.metadata('manufacturer', 'Node-RED');
    nodered = addDeviceType(nodered);
    sensors.push(nodered);
    
    // Laipac device type.
    let laipac = deviceBuilder.newDeviceType('laipac-S911', 'S911 Bracelet Locator HC');
    laipac.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/laipac/laipac-s-911bl.png');
    laipac.withDescription('S911 Bracelet Locator HC (Healthcare) can be used to provide location of the patients, physicians, nurses, and police on duty and assist patients unable to communicate due to issues of injury, health or age.');
    laipac.metadata('manufacturer', 'Laipac');
    laipac = addDeviceType(laipac);
    personnel.push(laipac);
    
    // iPhone device type.
    let iphone = deviceBuilder.newDeviceType('iphone6s', 'Apple iPhone 6S');
    iphone.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/misc/iphone6.jpg');
    iphone.withDescription("The only thing that's changed is everything. The moment you use iPhone 6s, you know you've never felt anything like it. With just a single press, 3D Touch lets you do more than ever. Live Photos brings your memories to life in a powerfully vivid way. And that's just the beginning. Take a deeper look at iPhone 6s, and you'll find innovation on every level.");
    iphone.metadata('manufacturer', 'Apple');
    iphone = addDeviceType(iphone);
    personnel.push(iphone);
    
    // iPad device type.
    let ipad = deviceBuilder.newDeviceType('ipad', 'Apple iPad');
    ipad.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/misc/ipad.jpg');
    ipad.withDescription("Even with its 12.9-inch Retina display, the largest and most capable iPad ever is only 6.9mm thin and weighs just 1.57 lbs. It has a powerful A9X chip with 64-bit desktop-class architecture, four speaker audio, advanced iSight and FaceTime HD cameras, Wi-Fi and LTE connectivity, iCloud, the breakthrough Touch ID fingerprint sensor, and up to 10 hours of battery life.");
    ipad.metadata('manufacturer', 'Apple');
    ipad = addDeviceType(ipad);
    personnel.push(ipad);
    
    // Add common commands.
    allDeviceTypes.forEach(function(type) {
      if (type != android) {
        let ping = deviceBuilder.newCommand(type.getToken(), randomId(), ns, 'ping').withDescription('Send a ping request to the device to verify it can be reached.');
        addCommand(type, ping);
        let testEvents = deviceBuilder.newCommand(type.getToken(), randomId(), ns, 'testEvents').withDescription('Send a ping request to the device to verify it can be reached.');
        addCommand(type, testEvents);
      }
    });
    
    // #################### //
    // Create Device Groups //
    // #################### //
    function addGroup(group) {
      group = deviceBuilder.persist(group);
      logger.info(`[Create Group] ${group.getName()}`);
      return group;
    }
    
    let heavyGroup = deviceBuilder.newGroup(randomId(), 'Heavy Equipment Tracking').withRole('heavy-equipment-tracking').withRole('tracking');
    heavyGroup.withDescription('Device group that contains devices for tracking location of heavy equipment.');
    heavyGroup.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/cat/cat-416f.jpg');
    heavyGroup = addGroup(heavyGroup);
    
    let personGroup = deviceBuilder.newGroup(randomId(), 'Personnel Tracking').withRole('personnel-tracking').withRole('tracking');
    personGroup.withDescription('Device group that contains devices for tracking location of people.');
    personGroup.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/sitewhere-symbol.png');
    personGroup = addGroup(personGroup);
    
    let sensorGroup = deviceBuilder.newGroup(randomId(), 'Sensors').withRole('monitoring').withRole('data-gathering');
    sensorGroup.withDescription('Device group that contains sensors for tracking environmental conditions.');
    sensorGroup.withImageUrl('https://s3.amazonaws.com/sitewhere-demo/construction/ekahau/ekahau-a4-tag.jpg');
    sensorGroup = addGroup(sensorGroup);
    
    // ############################## //
    // Create Devices and Assignments //
    // ############################## //
    
    // Create the requested number of devices and assignments per site.
    let heavyElements = []
    let personElements = []
    let sensorElements = []
    
    for(var i = 0; i < devicesPerSite; i++){
      let type = randomItem(allDeviceTypes);
      
      let assnInfo;
      if (sensors.includes(type)) {
        assnInfo = randomItem(sensorsItems);
      } else if (personnel.includes(type)) {
        assnInfo = randomItem(personnelItems);
      } else {
        assnInfo = randomItem(heavyEquipmentItems);
      }
      
      // Create a device.
      let device = deviceBuilder.newDevice(type.getToken(), randomDeviceToken(type)).withComment(`${assnInfo.title} based on ${type.getName()}.`);
      device = deviceBuilder.persist(device);
      logger.info(`[Create Device] ${device.getToken()}`);
      
      // Create an assignment based on device type.
      let assn = deviceBuilder.newAssignment(device.getToken(), acmeCustomer.getToken(), assnInfo.areaToken, assnInfo.assetToken);
      assn = deviceBuilder.persist(assn);
      logger.info(`[Create Assignment] ${assn.getToken()}`);
      
      let element = deviceBuilder.newGroupElement(device.getToken());
      if (sensors.includes(type)) {
        sensorElements.push(element);
      } else if (personnel.includes(type)) {
        personElements.push(element);
      } else {
        heavyElements.push(element);
      }
    }

    deviceBuilder.persist(heavyGroup, heavyElements);
    deviceBuilder.persist(personGroup, personElements);
    deviceBuilder.persist(sensorGroup, sensorElements);
