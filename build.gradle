buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
 	}
	dependencies {
		classpath 'com.bmuschko:gradle-docker-plugin:4.6.0'
		classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
		classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
	}
}

apply plugin: 'distribution'

ext['docker.base.image'] = 'openjdk:8-jre-alpine'
ext['docker.maintainer'] = 'admin@sitewhere.com'

ext['fabric8.version'] = '4.6.0'
    
allprojects {
    group = 'com.sitewhere'
	version = '2.2.0'
	
    repositories {
		mavenLocal()
        maven { url "http://repo.maven.apache.org/maven2" }
    }
	apply plugin: 'eclipse'
	
	apply plugin: "com.github.hierynomus.license"
	license {
		header rootProject.file('HEADER')
    	include "**/*.java"
	}

	// Use Docker plugin to allow for creating/pushing an image.
	apply plugin: 'com.bmuschko.docker-remote-api'
	
	// Allow Docker settings to be overridden by build environment.
	if (System.getenv("DOCKER_REGISTRY_URL") != null) registryUrl = System.getenv("DOCKER_REGISTRY_URL")
	if (System.getenv("DOCKER_REGISTRY_USERNAME") != null) registryUsername = System.getenv("DOCKER_REGISTRY_USERNAME")
	if (System.getenv("DOCKER_REGISTRY_PASSWORD") != null) registryPassword = System.getenv("DOCKER_REGISTRY_PASSWORD")
	if (System.getenv("DOCKER_REGISTRY_EMAIL") != null) registryEmail = System.getenv("DOCKER_REGISTRY_EMAIL")
	
	docker {
	    url = (System.getenv("DOCKER_HOST") != null) ? System.getenv("DOCKER_HOST") : dockerProtocol + '://' + dockerHostname + ':' + dockerPort
	    registryCredentials {
	        url = registryUrl
	        username = registryUsername
	        password = registryPassword
	        email = registryEmail
	    }
	}
 	
 	// Choose Java settings.
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    apply plugin: 'com.github.johnrengelman.shadow'
    
	jar {
	    manifest {
	        attributes('Implementation-Title': project.name,
	                   'Implementation-Version': project.version,
	                   'Main-Class': 'io.sitewhere.operator.SiteWhereOperator')
	    }
	}
    
	// Library dependencies.
    dependencies {
		compile group: 'com.sitewhere', name: 'sitewhere-k8s-model', version: "0.0.3"
	
    	compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.12.1'
		
        testCompile group: 'junit', name: 'junit'
    }
}

// Create a Dockerfile.
task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: shadowJar) {
    destFile = project.file('build/docker/Dockerfile')
    from "${rootProject.ext['docker.base.image']}"
	instruction "LABEL maintainer=${rootProject.ext['docker.maintainer']}"
		
	// Copy Spring Boot jar.
	copyFile("${project.name}-${project.version}-all.jar", "/")
			
	defaultCommand 'java', '-server', '-Xmx512M', '-Xss384K', '-jar', "/${project.name}-${project.version}-all.jar"	
}

// Copy artifact to Docker input folder.
task copyArtifactsToDocker(type: Copy, dependsOn: dockerFile) {
    from "${buildDir}/libs/${project.name}-${project.version}-all.jar"
    into 'build/docker'
}

// Build an image from the Dockerfile.
task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')
	tags = ["${dockerRepository}/sitewhere/${project.name}:${version}"]
}

// Build an image from the Dockerfile with tag latest.
task dockerImageLatest(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')
	
	def primaryTag = "${dockerRepository}/sitewhere/${project.name}:${version}"
	def secondaryTag = "${dockerRepository}/sitewhere/${project.name}:latest"
	tags = [primaryTag, secondaryTag]
}

// Build an image from the Dockerfile with tag edge.
task dockerImageEdge(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')
	
	def primaryTag = "${dockerRepository}/sitewhere/${project.name}:${version}"
	def secondaryTag = "${dockerRepository}/sitewhere/${project.name}:edge"
	tags = [primaryTag, secondaryTag]
}

// Push image to remote repository.
task dockerPush(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImage) {
    imageName = "${dockerRepository}/sitewhere/${project.name}".toString()
    tag = "${version}".toString()
}

// Push image to remote repository.
task dockerPushLatest(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImageLatest) {
    imageName = "${dockerRepository}/sitewhere/${project.name}".toString()
}

// Push image to remote repository.
task dockerPushEdge(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImageEdge) {
    imageName = "${dockerRepository}/sitewhere/${project.name}".toString()
}
